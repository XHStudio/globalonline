package com.global.globalonline.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.global.globalonline.db.bean.DataSource;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table data.
*/
public class DataSourceDao extends AbstractDao<DataSource, Long> {

    public static final String TABLENAME = "data";

    /**
     * Properties of entity DataSource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_ = new Property(1, String.class, "id_", false, "ID_");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Ename = new Property(3, String.class, "ename", false, "ENAME");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Sort_id = new Property(5, String.class, "sort_id", false, "SORT_ID");
        public final static Property Shortname = new Property(6, String.class, "shortname", false, "SHORTNAME");
        public final static Property Word = new Property(7, String.class, "word", false, "WORD");
        public final static Property Logo = new Property(8, String.class, "logo", false, "LOGO");
        public final static Property Miniconfirm = new Property(9, String.class, "miniconfirm", false, "MINICONFIRM");
        public final static Property Withdraw_fee = new Property(10, String.class, "withdraw_fee", false, "WITHDRAW_FEE");
        public final static Property Minwithdrawbtc = new Property(11, String.class, "minwithdrawbtc", false, "MINWITHDRAWBTC");
        public final static Property Maxwithdrawbtc = new Property(12, String.class, "maxwithdrawbtc", false, "MAXWITHDRAWBTC");
        public final static Property Recharge_fee = new Property(13, String.class, "recharge_fee", false, "RECHARGE_FEE");
        public final static Property Draw_fee = new Property(14, String.class, "draw_fee", false, "DRAW_FEE");
        public final static Property Bankname = new Property(15, String.class, "bankname", false, "BANKNAME");
        public final static Property Bankno = new Property(16, String.class, "bankno", false, "BANKNO");
        public final static Property Bankadd = new Property(17, String.class, "bankadd", false, "BANKADD");
        public final static Property Status = new Property(18, String.class, "status", false, "STATUS");
        public final static Property Module = new Property(19, String.class, "module", false, "MODULE");
    };


    public DataSourceDao(DaoConfig config) {
        super(config);
    }
    
    public DataSourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'data' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_' TEXT," + // 1: id_
                "'NAME' TEXT," + // 2: name
                "'ENAME' TEXT," + // 3: ename
                "'CODE' TEXT," + // 4: code
                "'SORT_ID' TEXT," + // 5: sort_id
                "'SHORTNAME' TEXT," + // 6: shortname
                "'WORD' TEXT," + // 7: word
                "'LOGO' TEXT," + // 8: logo
                "'MINICONFIRM' TEXT," + // 9: miniconfirm
                "'WITHDRAW_FEE' TEXT," + // 10: withdraw_fee
                "'MINWITHDRAWBTC' TEXT," + // 11: minwithdrawbtc
                "'MAXWITHDRAWBTC' TEXT," + // 12: maxwithdrawbtc
                "'RECHARGE_FEE' TEXT," + // 13: recharge_fee
                "'DRAW_FEE' TEXT," + // 14: draw_fee
                "'BANKNAME' TEXT," + // 15: bankname
                "'BANKNO' TEXT," + // 16: bankno
                "'BANKADD' TEXT," + // 17: bankadd
                "'STATUS' TEXT," + // 18: status
                "'MODULE' TEXT);"); // 19: module
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'data'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DataSource entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String id_ = entity.getId_();
        if (id_ != null) {
            stmt.bindString(2, id_);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(4, ename);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String sort_id = entity.getSort_id();
        if (sort_id != null) {
            stmt.bindString(6, sort_id);
        }
 
        String shortname = entity.getShortname();
        if (shortname != null) {
            stmt.bindString(7, shortname);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(8, word);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(9, logo);
        }
 
        String miniconfirm = entity.getMiniconfirm();
        if (miniconfirm != null) {
            stmt.bindString(10, miniconfirm);
        }
 
        String withdraw_fee = entity.getWithdraw_fee();
        if (withdraw_fee != null) {
            stmt.bindString(11, withdraw_fee);
        }
 
        String minwithdrawbtc = entity.getMinwithdrawbtc();
        if (minwithdrawbtc != null) {
            stmt.bindString(12, minwithdrawbtc);
        }
 
        String maxwithdrawbtc = entity.getMaxwithdrawbtc();
        if (maxwithdrawbtc != null) {
            stmt.bindString(13, maxwithdrawbtc);
        }
 
        String recharge_fee = entity.getRecharge_fee();
        if (recharge_fee != null) {
            stmt.bindString(14, recharge_fee);
        }
 
        String draw_fee = entity.getDraw_fee();
        if (draw_fee != null) {
            stmt.bindString(15, draw_fee);
        }
 
        String bankname = entity.getBankname();
        if (bankname != null) {
            stmt.bindString(16, bankname);
        }
 
        String bankno = entity.getBankno();
        if (bankno != null) {
            stmt.bindString(17, bankno);
        }
 
        String bankadd = entity.getBankadd();
        if (bankadd != null) {
            stmt.bindString(18, bankadd);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(19, status);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(20, module);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DataSource readEntity(Cursor cursor, int offset) {
        DataSource entity = new DataSource( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sort_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shortname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // word
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // logo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // miniconfirm
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // withdraw_fee
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // minwithdrawbtc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // maxwithdrawbtc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // recharge_fee
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // draw_fee
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bankname
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bankno
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // bankadd
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // status
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // module
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DataSource entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSort_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShortname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWord(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLogo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMiniconfirm(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWithdraw_fee(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMinwithdrawbtc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMaxwithdrawbtc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecharge_fee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDraw_fee(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBankname(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBankno(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBankadd(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStatus(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setModule(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DataSource entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DataSource entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
